; MCLK output
; Akiyuki Okayasu
; fs: 48kHz or 96kHz
; Output MCLK freq: 64fs
; PIO Clock freq: 15.36MHz (320fs@48kHz), 30.72MHz (320fs@96kHz)
; Jitter軽減のため、PIO分周比率は整数にするのが望ましい。
; fs=48kHzのときは、sysClk: 153.6MHz or 230.4MHzにすると整数にできる。
; fs=96kHzのときは、sysClk: 153.6MHz or 307.2MHzにすると整数にできる。

.program mclk_output

.wrap_target
    set pins, 0b1
    set pins, 0b0
.wrap

; I2S send Master
; Akiyuki Okayasu
; fs: 48kHz or 96kHz
; PIO Clock freq: 15.36MHz (320fs@48kHz), 30.72MHz (320fs@96kHz)
; Bit depth: 32bit
; Jitter軽減のため、PIO分周比率は整数にするのが望ましい。
; fs=48kHzのときは、sysClk: 76.8MHz or 153.6MHz or 230.4MHz or 384MHzにすると整数にできる。
; fs=96kHzのときは、sysClk: 153.6MHz or 307.2MHzにすると整数にできる。


.program i2s_out_master
; I2S audio output block. Synchronous with clock and input.
; Must run at BCK * 2.
;
; This block also outputs the word clock (also called frame or LR clock) and
; the bit clock.
;
; Set register x to (bit depth - 2) (e.g. for 24 bit audio, set to 22).
; Note that if this is needed to be synchronous with the SCK module,
; it is not possible to run 24-bit frames with an SCK of 256x fs. You must either
; run SCK at 384x fs (if your codec permits this) or use 32-bit frames, which
; work fine with 24-bit codecs.

.side_set 2

.wrap_target
                    ;        /--- LRCLK
                    ;        |/-- BCLK
frameL:             ;        ||
    set x, 14         side 0b00 ; start of Left frame
    pull noblock      side 0b01 ; One clock after edge change with no data
dataL:
    out pins, 1       side 0b00
    jmp x-- dataL     side 0b01

frameR:
    set x, 14         side 0b10
    pull noblock      side 0b11 ; One clock after edge change with no data
dataR:
    out pins, 1       side 0b10
    jmp x-- dataR     side 0b11
.wrap
